--ESQUEMA DE LA BASE DE DATOS

CREATE TABLE ROLE -- TABLA PARA ALMACENAR LOS ROLES QUE VAN A TENER LOS USUARIOS (SE DEJA EXCLUSIVAMENTE PARA ADMINISTRADORES Y CLIENTES)
(
ID_ROLE INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
ROLE_NAME VARCHAR(20) NOT NULL CHECK(ROLE_NAME IN('ADMIN','CLIENT')) UNIQUE,
ROLE_CREATION_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE USER_INFO -- TABLA PARA ALMACENAR LA INFORMACION PERSONAL DE LOS USUARIOS(CLIENTES)
(
ID_USER_INFO INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
FIRST_NAME VARCHAR(100) NOT NULL,
LAST_NAME VARCHAR(100) NOT NULL,
EMAIL VARCHAR(200) NULL,
PHONE_NUMBER VARCHAR(15) NOT NULL,
ADDRESS VARCHAR(200) NOT NULL
);

CREATE TABLE USERGREEN -- TABLA PARA ALMACENAR LOS USUARIOS
(
ID_USER INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
USER_NAME VARCHAR(50) NOT NULL UNIQUE,
USER_PASSWORD VARCHAR(200) NOT NULL,
USER_CREATION_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
USER_STATUS TINYINT(1) NOT NULL DEFAULT 1 CHECK(USER_STATUS IN(1,0)),
ID_USER_INFO INT NOT NULL,
ID_ROLE INT NOT NULL,
FOREIGN KEY(ID_ROLE) REFERENCES ROLE(ID_ROLE),
FOREIGN KEY(ID_USER_INFO) REFERENCES USER_INFO(ID_USER_INFO) ON DELETE CASCADE
);

CREATE TABLE IMAGES -- TABLA PARA ALMACENAR LAS RUTAS DE LAS IMAGENES QUE SUBAN LOS USUARIOS QUE SEAN ADMINISTRADORES
(
ID_IMAGE INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
IMAGE_PATH TEXT NOT NULL,
UPLOAD_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
ID_USER INT NOT NULL,
FOREIGN KEY(ID_USER) REFERENCES USERGREEN(ID_USER)
);

CREATE TABLE SERVICE -- TABLA PARA ALMACENAR LOS SERVICIOS, PRECIOS Y EL ESTADO DE DICHO SERVICIO
(
ID_SERVICE INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
SERVICE_NAME VARCHAR(100) NOT NULL UNIQUE,
DESCRIPTION VARCHAR(200) NULL,
SERVICE_PRICE DECIMAL(10,2) NOT NULL CHECK(SERVICE_PRICE > 0),
SERVICE_CREATION_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
SERVICE_STATUS TINYINT(1) NOT NULL DEFAULT 1 CHECK(SERVICE_STATUS IN(1,0))
);

CREATE TABLE SERVICES_USERS -- TABLA PARA ALMACENAR LOS SERVICIOS, NUMERO DE SERVICIOS Y EL COSTO DE ELLOS CORRESPONDIENTEMENTE CON EL USUARIO QUE LOS SOLICITO
(
ID_SERVICES_USERS INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
ID_SERVICE INT NOT NULL,
ID_USER INT NOT NULL,
QUANTITY_OF_SERVICES INT CHECK(QUANTITY_OF_SERVICES > 0) NOT NULL,
TOTAL_COST DECIMAL(10,2) CHECK(TOTAL_COST > 0),
SERVICE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
SERVICES_USERS_STATUS VARCHAR(20) CHECK(SERVICES_USERS_STATUS IN('PENDING','COMPLETED')) NOT NULL,
FOREIGN KEY(ID_SERVICE) REFERENCES SERVICE(ID_SERVICE),
FOREIGN KEY(ID_USER) REFERENCES USERGREEN(ID_USER)
);

CREATE TABLE ACTIVITY_LOGS -- TABLA PARA ALMACENAR BITACORAS DE ACTIVIDADES DE LOS DATOS QUE HAN SIDO INGRESADOS A LA BASE DE DATOS
(
ID_ACTIVITY_LOGS INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
ID_USER INT NOT NULL,
ACTION_LOG TEXT NOT NULL,
ACTION_LOG_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
FOREIGN KEY(ID_USER) REFERENCES USERGREEN(ID_USER)
);

CREATE TABLE ERROR_LOGS -- TABLA PARA ALMACENAR BITACORAS DE ERRORES DE ACTIVIDADES DE LOS DATOS QUE HAN INTENTADO SER INGRESADOS A LA BASE DE DATOS (PARA TENER UN SEGUIMIENTO DE BUGS DE INGRESO DE DATOS)
(
ID_ERROR_LOGS INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
ID_USER INT NOT NULL,
ACTION_ERROR_LOG TEXT NOT NULL,
ACTION_ERROR_LOG_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
FOREIGN KEY(ID_USER) REFERENCES USERGREEN(ID_USER)
);